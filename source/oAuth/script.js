"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.initialize = void 0;var _koaViews = _interopRequireDefault(require("koa-views"));
var _koaBodyparser = _interopRequireDefault(require("koa-bodyparser"));
var _oauth2Server = _interopRequireDefault(require("oauth2-server"));
var _oAuth2ServerModel = _interopRequireDefault(require("./oAuth2Server.model.js"));
















const initialize = async () => {
  let entrypointSetting = { defaultConditionTreeKey: 'XYZ' };

  let Request = _oauth2Server.default.Request;
  let Response = _oauth2Server.default.Response;






  let oAuth2Server;
  _oauth2Server.default = (_oauth2Server.default, function () {throw new Error('"' + "OAuth2Server" + '" is read-only.');}());
  oAuth2Server = new _oauth2Server.default({
    debug: true,



    model: _oAuth2ServerModel.default });



  serverKoa.use((0, _koaViews.default)('/', { map: { html: 'underscore', js: 'underscore' } }));
  let middlewareArray = [
  (0, _koaBodyparser.default)(),
  async (context, next) => {


    await context.set('Access-Control-Allow-Origin', '*');
    await context.set('connection', 'keep-alive');
    await next();
  },
  async (context, next) => {
    let middlewareController = await MiddlewareController.createContext({ portAppInstance: context.instance });
    let middlewareArray = await middlewareController.initializeNestedUnit({ nestedUnitKey: 'd908335b-b60a-4a00-8c33-b9bc4a9c64ec' });
    await implementMiddlewareOnModuleUsingJson(middlewareArray)(context, next);



  },
  async (context, next) => {



    let conditionController = await ConditionController.createContext({ portAppInstance: context.instance });

    let entrypointConditionTree = '0681f25c-4c00-4295-b12a-6ab81a3cb440';
    if (process.env.SZN_DEBUG == 'true' && context.header.debug == 'true') console.log(`🍊 Entrypoint Condition Key: ${entrypointConditionTree} \n \n`);
    let callback = await conditionController.initializeNestedUnit({ nestedUnitKey: entrypointConditionTree });
    if (process.env.SZN_DEBUG == 'true' && context.header.debug == 'true') console.log(`🔀✔️ Choosen callback is: %c ${callback.name}`, consoleLogStyle.style.green);

    await implementConditionActionOnModuleUsingJson({ setting: callback })(context, next);

    if (callback && callback.name == 'post') {

      let x = await Class.authenticate(context.request, context.response);
      if (x) await next();
    }
  },
  async (context, next) => {
    context.status = 404;
    console.log('Last Middleware reached.');
    await next();
  }];

};exports.initialize = initialize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,