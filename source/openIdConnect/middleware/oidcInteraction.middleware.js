"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.oidcInteractionEntrypoint = oidcInteractionEntrypoint;exports.oidcInteractionLogin = oidcInteractionLogin;exports.oidcInteractionConfirm = oidcInteractionConfirm;var _querystring = _interopRequireDefault(require("querystring"));




function oidcInteractionEntrypoint({

  openIdConnectServer })
{
  return async (context, next) => {

    const pathArray = context.path.split('/').filter(item => item);
    if (pathArray[0] == 'interaction' && !pathArray[2]) {

      const details = await openIdConnectServer.interactionDetails(context.req);
      const client = await openIdConnectServer.Client.find(details.params.client_id);
      if (details.interaction.error === 'login_required') {

        await context.render(`${__dirname}/../htmlView/oidcInteractionLogin.html`, {
          client,
          details,
          title: 'Sign-in',
          debug: _querystring.default.stringify(details.params, ',<br/>', ' = ', {
            encodeURIComponent: value => value }),

          interaction: _querystring.default.stringify(details.interaction, ',<br/>', ' = ', {
            encodeURIComponent: value => value }) });


      } else {

        await context.render(`${__dirname}/../htmlView/oidcInteractionConfirm.html`, {
          client,
          details,
          title: 'confirm consent',
          debug: _querystring.default.stringify(details.params, ',<br/>', ' = ', {
            encodeURIComponent: value => value }),

          interaction: _querystring.default.stringify(details.interaction, ',<br/>', ' = ', {
            encodeURIComponent: value => value }) });


      }
    } else {
      await next();
    }
  };
}

function oidcInteractionLogin({ openIdConnectServer }) {
  return async (context, next) => {

    const pathArray = context.path.split('/').filter(item => item);
    if (pathArray[0] == 'interaction' && pathArray[2] == 'login') {
      const username = context.request.body.login;
      const password = context.request.body.password;


      const accountId = username;


      const result = {
        login: {

          account: accountId,
          acr: 'urn:mace:incommon:iap:bronze',
          amr: ['pwd'],
          remember: !!context.request.body.remember,
          ts: Math.floor(Date.now() / 1000) },


























        consent: {} };


      await openIdConnectServer.interactionFinished(context.req, context.res, result);
      await next();
    } else {
      await next();
    }
  };
}

function oidcInteractionConfirm({

  openIdConnectServer })
{
  return async (context, next) => {

    const pathArray = context.path.split('/').filter(item => item);
    if (pathArray[0] == 'interaction' && pathArray[2] == 'confirm') {
      console.log('confirm middleware called');
      const result = { consent: {} };
      await openIdConnectServer.interactionFinished(context.req, context.res, result);
      await next();
    } else {
      await next();
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,